Author: Florian Weimer <fweimer@redhat.com>
Date:   Wed Jul 4 11:34:36 2018 +0200

    Add --with-nonshared-cflags option to configure

Submitted upstream:

  https://sourceware.org/ml/libc-alpha/2018-07/msg00071.html

Index: glibc-2.27/INSTALL
===================================================================
--- glibc-2.27.orig/INSTALL	2018-12-18 10:18:26.955967346 +0000
+++ glibc-2.27/INSTALL	2018-12-18 10:18:43.831756370 +0000
@@ -79,10 +79,19 @@ will be used, and CFLAGS sets optimizati
      constructs in the GNU C Library.  In that case, 'configure' will
      detect the problem and suppress these constructs, so that the
      library will still be usable, but functionality may be lost--for
      example, you can't build a shared libc with old binutils.
 
+'--with-nonshared-cflags=CFLAGS'
+     Use additional compiler flags CFLAGS to build the parts of the
+     library which are always statically linked into applications and
+     libraries even with shared linking (that is, the object files
+     contained in 'lib*_nonshared.a' libraries).  The build process will
+     automatically use the appropriate flags, but this option can be
+     used to set additional flags required for building applications and
+     libraries, to match local policy.
+
 '--disable-shared'
      Don't build shared libraries even if it is possible.  Not all
      systems support shared libraries; you need ELF support and
      (currently) the GNU linker.
 
Index: glibc-2.27/Makeconfig
===================================================================
--- glibc-2.27.orig/Makeconfig	2018-12-18 10:18:26.957967321 +0000
+++ glibc-2.27/Makeconfig	2018-12-18 10:19:03.791506839 +0000
@@ -1032,11 +1032,11 @@ ifeq (yes,$(build-shared))
 object-suffixes-for-libc += .oS
 
 # Must build the routines as PIC, though, because they can end up in (users')
 # shared objects.  We don't want to use CFLAGS-os because users may, for
 # example, make that processor-specific.
-CFLAGS-.oS = $(CFLAGS-.o) $(PIC-ccflag)
+CFLAGS-.oS = $(CFLAGS-.o) $(PIC-ccflag) $(extra-nonshared-cflags)
 CPPFLAGS-.oS = $(CPPFLAGS-.o) -DPIC -DLIBC_NONSHARED=1
 libtype.oS = lib%_nonshared.a
 endif
 
 # The assembler can generate debug information too.
Index: glibc-2.27/config.make.in
===================================================================
--- glibc-2.27.orig/config.make.in	2018-12-18 10:18:26.959967296 +0000
+++ glibc-2.27/config.make.in	2018-12-18 10:18:43.836756307 +0000
@@ -108,10 +108,11 @@ CC = @CC@
 CXX = @CXX@
 BUILD_CC = @BUILD_CC@
 CFLAGS = @CFLAGS@
 CPPFLAGS-config = @CPPFLAGS@
 CPPUNDEFS = @CPPUNDEFS@
+extra-nonshared-cflags = @extra_nonshared_cflags@
 ASFLAGS-config = @ASFLAGS_config@
 AR = @AR@
 NM = @NM@
 MAKEINFO = @MAKEINFO@
 AS = $(CC) -c
Index: glibc-2.27/configure
===================================================================
--- glibc-2.27.orig/configure	2018-12-18 10:18:26.961967271 +0000
+++ glibc-2.27/configure	2018-12-18 10:18:43.840756257 +0000
@@ -682,10 +682,11 @@ enable_werror
 all_warnings
 force_install
 bindnow
 hardcoded_path_in_tests
 enable_timezone_tools
+extra_nonshared_cflags
 use_default_link
 sysheaders
 ac_ct_CXX
 CXXFLAGS
 CXX
@@ -760,10 +761,11 @@ with_gd_include
 with_gd_lib
 with_binutils
 with_selinux
 with_headers
 with_default_link
+with_nonshared_cflags
 enable_sanity_checks
 enable_shared
 enable_profile
 enable_static_pie
 enable_timezone_tools
@@ -1477,10 +1479,12 @@ Optional Packages:
   --with-binutils=PATH    specify location of binutils (as and ld)
   --with-selinux          if building with SELinux support
   --with-headers=PATH     location of system headers to use (for example
                           /usr/src/linux/include) [default=compiler default]
   --with-default-link     do not use explicit linker scripts
+  --with-nonshared-cflags=FLAGS
+                          build nonshared libraries with additional FLAGS
   --with-cpu=CPU          select code for CPU variant
 
 Some influential environment variables:
   CC          C compiler command
   CFLAGS      C compiler flags
@@ -3334,10 +3338,20 @@ if test "${with_default_link+set}" = set
 else
   use_default_link=default
 fi
 
 
+
+# Check whether --with-nonshared-cflags was given.
+if test "${with_nonshared_cflags+set}" = set; then :
+  withval=$with_nonshared_cflags; extra_nonshared_cflags=$withval
+else
+  extra_nonshared_cflags=
+fi
+
+
+
 # Check whether --enable-sanity-checks was given.
 if test "${enable_sanity_checks+set}" = set; then :
   enableval=$enable_sanity_checks; enable_sanity=$enableval
 else
   enable_sanity=yes
Index: glibc-2.27/configure.ac
===================================================================
--- glibc-2.27.orig/configure.ac	2018-12-18 10:18:26.963967246 +0000
+++ glibc-2.27/configure.ac	2018-12-18 10:18:43.842756232 +0000
@@ -152,10 +152,18 @@ AC_ARG_WITH([default-link],
 	    AC_HELP_STRING([--with-default-link],
 			   [do not use explicit linker scripts]),
 	    [use_default_link=$withval],
 	    [use_default_link=default])
 
+dnl Additional build flags injection.
+AC_ARG_WITH([nonshared-cflags],
+	    AC_HELP_STRING([--with-nonshared-cflags=FLAGS],
+			   [build nonshared libraries with additional FLAGS]),
+	    [extra_nonshared_cflags=$withval],
+	    [extra_nonshared_cflags=])
+AC_SUBST(extra_nonshared_cflags)
+
 AC_ARG_ENABLE([sanity-checks],
 	      AC_HELP_STRING([--disable-sanity-checks],
 			     [really do not use threads (should not be used except in special situations) @<:@default=yes@:>@]),
 	      [enable_sanity=$enableval],
 	      [enable_sanity=yes])
Index: glibc-2.27/manual/install.texi
===================================================================
--- glibc-2.27.orig/manual/install.texi	2018-12-18 10:18:26.973967121 +0000
+++ glibc-2.27/manual/install.texi	2018-12-18 10:18:43.844756207 +0000
@@ -104,10 +104,19 @@ the default binutils on your system cann
 in @theglibc{}.  In that case, @code{configure} will detect the
 problem and suppress these constructs, so that the library will still be
 usable, but functionality may be lost---for example, you can't build a
 shared libc with old binutils.
 
+@item --with-nonshared-cflags=@var{cflags}
+Use additional compiler flags @var{cflags} to build the parts of the
+library which are always statically linked into applications and
+libraries even with shared linking (that is, the object files contained
+in @file{lib*_nonshared.a} libraries).  The build process will
+automatically use the appropriate flags, but this option can be used to
+set additional flags required for building applications and libraries,
+to match local policy.
+
 @c disable static doesn't work currently
 @c @item --disable-static
 @c Don't build static libraries.  Static libraries aren't that useful these
 @c days, but we recommend you build them in case you need them.
 
