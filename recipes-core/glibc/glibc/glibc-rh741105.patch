Index: glibc-2.27/elf/dl-load.c
===================================================================
--- glibc-2.27.orig/elf/dl-load.c	2018-02-01 16:17:18.000000000 +0000
+++ glibc-2.27/elf/dl-load.c	2018-12-18 10:17:12.874893487 +0000
@@ -818,11 +818,12 @@ _dl_map_object_from_fd (const char *name
   struct r_debug *r = _dl_debug_initialize (0, nsid);
   bool make_consistent = false;
 
   /* Get file information.  */
   struct r_file_id id;
-  if (__glibc_unlikely (!_dl_get_file_id (fd, &id)))
+  struct stat64 st;
+  if (__glibc_unlikely (!_dl_get_file_id (fd, &id, &st)))
     {
       errstring = N_("cannot stat shared object");
     call_lose_errno:
       errval = errno;
     call_lose:
@@ -1019,10 +1020,20 @@ _dl_map_object_from_fd (const char *name
 	    {
 	      errstring
 		= N_("ELF load command address/offset not properly aligned");
 	      goto call_lose;
 	    }
+	  if (__glibc_unlikely (ph->p_offset + ph->p_filesz > st.st_size))
+	    {
+	      /* If the segment requires zeroing of part of its last
+		 page, we'll crash when accessing the unmapped page.
+		 There's still a possibility of a race, if the shared
+		 object is truncated between the fxstat above and the
+		 memset below.  */
+	      errstring = N_("ELF load command past end of file");
+	      goto call_lose;
+	    }
 
 	  struct loadcmd *c = &loadcmds[nloadcmds++];
 	  c->mapstart = ALIGN_DOWN (ph->p_vaddr, GLRO(dl_pagesize));
 	  c->mapend = ALIGN_UP (ph->p_vaddr + ph->p_filesz, GLRO(dl_pagesize));
 	  c->dataend = ph->p_vaddr + ph->p_filesz;
Index: glibc-2.27/sysdeps/generic/dl-fileid.h
===================================================================
--- glibc-2.27.orig/sysdeps/generic/dl-fileid.h	2018-02-01 16:17:18.000000000 +0000
+++ glibc-2.27/sysdeps/generic/dl-fileid.h	2018-12-18 10:17:12.878893437 +0000
@@ -27,11 +27,12 @@ struct r_file_id
 
 /* Sample FD to fill in *ID.  Returns true on success.
    On error, returns false, with errno set.  */
 static inline bool
 _dl_get_file_id (int fd __attribute__ ((unused)),
-		 struct r_file_id *id __attribute__ ((unused)))
+		 struct r_file_id *id __attribute__ ((unused)),
+		 struct stat64_t *st __attribute__((unused)))
 {
   return true;
 }
 
 /* Compare two results from _dl_get_file_id for equality.
Index: glibc-2.27/sysdeps/posix/dl-fileid.h
===================================================================
--- glibc-2.27.orig/sysdeps/posix/dl-fileid.h	2018-02-01 16:17:18.000000000 +0000
+++ glibc-2.27/sysdeps/posix/dl-fileid.h	2018-12-18 10:17:12.883893375 +0000
@@ -25,22 +25,20 @@ struct r_file_id
   {
     dev_t dev;
     ino64_t ino;
   };
 
-/* Sample FD to fill in *ID.  Returns true on success.
+/* Sample FD to fill in *ID and *ST.  Returns true on success.
    On error, returns false, with errno set.  */
 static inline bool
-_dl_get_file_id (int fd, struct r_file_id *id)
+_dl_get_file_id (int fd, struct r_file_id *id, struct stat64 *st)
 {
-  struct stat64 st;
-
-  if (__glibc_unlikely (__fxstat64 (_STAT_VER, fd, &st) < 0))
+  if (__glibc_unlikely (__fxstat64 (_STAT_VER, fd, st) < 0))
     return false;
 
-  id->dev = st.st_dev;
-  id->ino = st.st_ino;
+  id->dev = st->st_dev;
+  id->ino = st->st_ino;
   return true;
 }
 
 /* Compare two results from _dl_get_file_id for equality.  */
 static inline bool
